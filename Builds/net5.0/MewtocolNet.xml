<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MewtocolNet</name>
    </assembly>
    <members>
        <member name="M:MewtocolNet.MewtocolInterface.ConnectAsync(System.Action{MewtocolNet.Responses.PLCInfo},System.Action)">
            <summary>
            Trys to connect to the PLC by the IP given in the constructor
            </summary>
            <param name="OnConnected">Gets called when a connection with a PLC was established</param>
            <param name="OnFailed">Gets called when an error or timeout during connection occurs</param>
            <returns></returns>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.AttachContinousReader(System.Int32)">
            <summary>
            Attaches a continous reader that reads back the Registers and Contacts
            </summary>
        </member>
        <member name="P:MewtocolNet.MewtocolInterface.PlcInfo">
            <summary>
            Generic information about the connected PLC
            </summary>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.#ctor(System.String,System.Int32)">
            <summary>
            Builds a new Interfacer for a PLC
            </summary>
            <param name="_ip"></param>
            <param name="_port"></param>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.SendCommandAsync(System.String)">
            <summary>
            Sends a command to the PLC and awaits results
            </summary>
            <param name="_msg">MEWTOCOL Formatted request string ex: %01#RT</param>
            <param name="_close">Auto close of frame [true]%01#RT01\r [false]%01#RT</param>
            <returns>Returns the result</returns>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.GetPLCInfoAsync">
            <summary>
            Gets generic information about the PLC
            </summary>
            <returns>A PLCInfo class</returns>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.ReadBoolContacts(System.Collections.Generic.List{MewtocolNet.Responses.Contact},System.Int32)">
            <summary>
            Reads bool values from the plc by the given <c>Contact</c> List
            </summary>
            <param name="_contactsToRead">A list of contacts</param>
            <param name="_stationNumber">The PLCs station number</param>
            <returns>List of IBoolContact with unique copys of the given contacts</returns>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.WriteContact(MewtocolNet.Responses.Contact,System.Boolean,System.Int32)">
            <summary>
            Writes a boolen value to the given contact
            </summary>
            <param name="_contact">The contact to write</param>
            <param name="_value">The boolean state to write</param>
            <param name="_stationNumber">Station Number (optional)</param>
            <returns>A result struct</returns>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.ReadNumRegister``1(MewtocolNet.Responses.NRegister{``0},System.Int32)">
            <summary>
            Reads the given numeric register from PLC
            </summary>
            <typeparam name="T">Type of number (short, ushort, int, uint, float)</typeparam>
            <param name="_toRead">The register to read</param>
            <param name="_stationNumber">Station number to access</param>
            <returns>A result with the given NumberRegister containing the readback value and a result struct</returns>
        </member>
        <member name="M:MewtocolNet.MewtocolInterface.WriteNumRegister``1(MewtocolNet.Responses.NRegister{``0},``0,System.Int32)">
            <summary>
            Reads the given numeric register from PLC
            </summary>
            <typeparam name="T">Type of number (short, ushort, int, uint, float)</typeparam>
            <param name="_toWrite">The register to write</param>
            <param name="_stationNumber">Station number to access</param>
            <returns>A result with the given NumberRegister and a result struct</returns>
        </member>
        <member name="E:MewtocolNet.Events.MewtocolContactListener.ContactsChangedValue">
            <summary>
            Gets fired whenever a contact of the observed list changes its value
            </summary>
        </member>
        <member name="T:MewtocolNet.Responses.Register">
            <summary>
            A class describing a register
            </summary>
        </member>
        <member name="E:MewtocolNet.Responses.Register.ValueChanged">
            <summary>
            Gets called whenever the value was changed
            </summary>
        </member>
        <member name="T:MewtocolNet.Responses.NRegister`1">
            <summary>
            Defines a register containing a number
            </summary>
            <typeparam name="T">The type of the numeric value</typeparam>
        </member>
        <member name="P:MewtocolNet.Responses.NRegister`1.Value">
            <summary>
            The value of the register
            </summary>
        </member>
        <member name="M:MewtocolNet.Responses.NRegister`1.#ctor(System.Int32,System.String)">
            <summary>
            Defines a register containing a number
            </summary>
            <param name="_adress">Memory start adress max 99999</param>
            <param name="_format">The format in which the variable is stored</param>
        </member>
        <member name="T:MewtocolNet.Responses.NRegisterResult`1">
            <summary>
            Result for a read/write operation
            </summary>
            <typeparam name="T">The type of the numeric value</typeparam>
        </member>
        <member name="T:MewtocolNet.Responses.SRegister">
            <summary>
            Defines a register containing a string
            </summary>
        </member>
        <member name="M:MewtocolNet.Responses.SRegister.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Defines a register containing a string
            </summary>
        </member>
        <member name="T:MewtocolNet.Responses.CommandResult">
            <summary>
            The formatted result of a ascii command
            </summary>
        </member>
        <member name="T:MewtocolNet.Responses.PLCInfo">
            <summary>
            Contains generic information about the plc
            </summary>
        </member>
        <member name="M:MewtocolNet.Responses.PLCInfo.PLCMode.BuildFromHex(System.String)">
            <summary>
            Gets operation mode from 2 digit hex number
            </summary>
        </member>
        <member name="T:MewtocolNet.Responses.IBoolContact">
            <summary>
            Contact as bool contact
            </summary>
        </member>
        <member name="T:MewtocolNet.Responses.Contact">
            <summary>
            A class describing a PLC contact
            </summary>
        </member>
        <member name="M:MewtocolNet.Responses.Contact.#ctor(MewtocolNet.Responses.Contact.PFX,System.Int32,System.String)">
            <summary>
            Creates a new base Contact
            </summary>
            <param name="_prefix">A prefix identifier eg. X,Y,R,L</param>
            <param name="_number">The number of the PLC contact</param>
        </member>
        <member name="M:MewtocolNet.Responses.Contact.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new base Contact
            </summary>
            <param name="_prefix">A prefix identifier eg. X,Y,R,L</param>
            <param name="_number">The number of the PLC contact</param>
        </member>
        <member name="M:MewtocolNet.Responses.Contact.#ctor(System.String,System.String)">
            <summary>
            Build contact from complete contact name
            </summary>
            <param name="_contactName">Complete contact name e.g. Y1C, Y3D or X1</param>
        </member>
        <member name="M:MewtocolNet.Responses.Contact.BuildMewtocolIdent">
            <summary>
            Builds the mewtocol ascii contact identifier
            </summary>
            <returns>The identifier e.g. Y0001 or Y000A or X001C</returns>
        </member>
        <member name="M:MewtocolNet.Responses.Contact.ToGenericObject">
            <summary>
            Converts the class to a generic json compatible object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MewtocolNet.Responses.Contact.ShallowCopy">
            <summary>
            Creates a copy of the contact
            </summary>
        </member>
    </members>
</doc>
